class h{constructor(t=0,s=0){this.x=t,this.y=s}_matMult(t){const s=t[0]*this.x+t[1]*this.y,i=t[2]*this.x+t[3]*this.y;return this.x=s,this.y=i,this}_add(t){return this.x+=t.x,this.y+=t.y,this}_sub(t){return this.x-=t.x,this.y-=t.y,this}_mult(t){return this.x*=t,this.y*=t,this}_div(t){return this.x/=t,this.y/=t,this}_multByPoint(t){return this.x*=t.x,this.y*=t.y,this}_divByPoint(t){return this.x/=t.x,this.y/=t.y,this}_unit(){return this._div(this.mag()),this}_perp(){const t=this.y;return this.y=this.x,this.x=-t,this}_rotate(t){const s=Math.cos(t),i=Math.sin(t),r=s*this.x-i*this.y,n=i*this.x+s*this.y;return this.x=r,this.y=n,this}_rotateAround(t,s){const i=Math.cos(t),r=Math.sin(t),n=s.x+i*(this.x-s.x)-r*(this.y-s.y),e=s.y+r*(this.x-s.x)+i*(this.y-s.y);return this.x=n,this.y=e,this}_round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}clone(){return new h(this.x,this.y)}add(t){return this.clone()._add(t)}sub(t){return this.clone()._sub(t)}multByPoint(t){return this.clone()._multByPoint(t)}divByPoint(t){return this.clone()._divByPoint(t)}mult(t){return this.clone()._mult(t)}div(t){return this.clone()._div(t)}rotate(t){return this.clone()._rotate(t)}rotateAround(t,s){return this.clone()._rotateAround(t,s)}matMult(t){return this.clone()._matMult(t)}unit(){return this.clone()._unit()}perp(){return this.clone()._perp()}round(){return this.clone()._round()}mag(){return Math.sqrt(this.x*this.x+this.y*this.y)}equals(t){return this.x===t.x&&this.y===t.y}dist(t){return Math.sqrt(this.distSqr(t))}distSqr(t){const s=t.x-this.x,i=t.y-this.y;return s*s+i*i}angle(){return Math.atan2(this.y,this.x)}angleTo(t){return Math.atan2(this.y-t.y,this.x-t.x)}angleWith(t){return this.angleWithSep(t.x,t.y)}angleWithSep(t,s){return Math.atan2(this.x*s-this.y*t,this.x*t+this.y*s)}toString(){return`{x: ${this.x}, y: ${this.y}}`}static convert(t){return t instanceof h?t:Array.isArray(t)?new h(t[0],t[1]):t}}export{h as Point};
