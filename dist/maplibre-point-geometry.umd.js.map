{"version":3,"file":"maplibre-point-geometry.umd.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * This is TypeScript rewrite of https://github.com/mapbox/point-geometry\n */\n\n/**\n * Row major 2x2 matrix\n */\nexport type Matrix2 = [number, number, number, number];\n\n/**\n * a point\n * @param x\n * @param y\n */\nexport class Point {\n  public x: number;\n  public y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  private _matMult(m: Matrix2): Point {\n    const x = m[0] * this.x + m[1] * this.y;\n    const y = m[2] * this.x + m[3] * this.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  private _add(p: Point): Point {\n    this.x += p.x;\n    this.y += p.y;\n    return this;\n  }\n\n  private _sub(p: Point): Point {\n    this.x -= p.x;\n    this.y -= p.y;\n    return this;\n  }\n\n  private _mult(k: number): Point {\n    this.x *= k;\n    this.y *= k;\n    return this;\n  }\n\n  private _div(k: number): Point {\n    this.x /= k;\n    this.y /= k;\n    return this;\n  }\n\n  private _multByPoint(p: Point): Point {\n    this.x *= p.x;\n    this.y *= p.y;\n    return this;\n  }\n\n  private _divByPoint(p: Point): Point {\n    this.x /= p.x;\n    this.y /= p.y;\n    return this;\n  }\n\n  private _unit(): Point {\n    this._div(this.mag());\n    return this;\n  }\n\n  private _perp(): Point {\n    const y = this.y;\n    this.y = this.x;\n    this.x = -y;\n    return this;\n  }\n\n  private _rotate(angle: number): Point {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const x = cos * this.x - sin * this.y;\n    const y = sin * this.x + cos * this.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  private _rotateAround(angle: number, p: Point): Point {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y);\n    const y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  private _round(): Point {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  }\n\n  /**\n   * Clone this point, returning a new point that can be modified\n   * without affecting the old one.\n   * @return {Point} the clone\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Add this point's x & y coordinates to another point,\n   * yielding a new point.\n   * @param {Point} p the other point\n   * @return {Point} output point\n   */\n  add(p: Point): Point {\n    return this.clone()._add(p);\n  }\n\n  /**\n   * Subtract this point's x & y coordinates to from point,\n   * yielding a new point.\n   * @param {Point} p the other point\n   * @return {Point} output point\n   */\n  sub(p: Point): Point {\n    return this.clone()._sub(p);\n  }\n\n  /**\n   * Multiply this point's x & y coordinates by point,\n   * yielding a new point.\n   * @param {Point} p the other point\n   * @return {Point} output point\n   */\n  multByPoint(p: Point): Point {\n    return this.clone()._multByPoint(p);\n  }\n\n  /**\n   * Divide this point's x & y coordinates by point,\n   * yielding a new point.\n   * @param {Point} p the other point\n   * @return {Point} output point\n   */\n  divByPoint(p: Point): Point {\n    return this.clone()._divByPoint(p);\n  }\n\n  /**\n   * Multiply this point's x & y coordinates by a factor,\n   * yielding a new point.\n   * @param {Number} k factor\n   * @return {Point} output point\n   */\n  mult(k: number): Point {\n    return this.clone()._mult(k);\n  }\n\n  /**\n   * Divide this point's x & y coordinates by a factor,\n   * yielding a new point.\n   * @param {Point} k factor\n   * @return {Point} output point\n   */\n  div(k: number): Point {\n    return this.clone()._div(k);\n  }\n\n  /**\n   * Rotate this point around the 0, 0 origin by an angle a,\n   * given in radians\n   * @param {Number} a angle to rotate around, in radians\n   * @return {Point} output point\n   */\n  rotate(a: number): Point {\n    return this.clone()._rotate(a);\n  }\n\n  /**\n   * Rotate this point around p point by an angle a,\n   * given in radians\n   * @param {Number} a angle to rotate around, in radians\n   * @param {Point} p Point to rotate around\n   * @return {Point} output point\n   */\n  rotateAround(a: number, p: Point): Point {\n    return this.clone()._rotateAround(a, p);\n  }\n\n  /**\n   * Multiply this point by a 4x1 transformation matrix\n   * @param {Array<Number>} m transformation matrix\n   * @return {Point} output point\n   */\n  matMult(m: Matrix2): Point {\n    return this.clone()._matMult(m);\n  }\n\n  /**\n   * Calculate this point but as a unit vector from 0, 0, meaning\n   * that the distance from the resulting point to the 0, 0\n   * coordinate will be equal to 1 and the angle from the resulting\n   * point to the 0, 0 coordinate will be the same as before.\n   * @return {Point} unit vector point\n   */\n  unit(): Point {\n    return this.clone()._unit();\n  }\n\n  /**\n   * Compute a perpendicular point, where the new y coordinate\n   * is the old x coordinate and the new x coordinate is the old y\n   * coordinate multiplied by -1\n   * @return {Point} perpendicular point\n   */\n  perp(): Point {\n    return this.clone()._perp();\n  }\n\n  /**\n   * Return a version of this point with the x & y coordinates\n   * rounded to integers.\n   * @return {Point} rounded point\n   */\n  round(): Point {\n    return this.clone()._round();\n  }\n\n  /**\n   * Return the magnitude of this point: this is the Euclidean\n   * distance from the 0, 0 coordinate to this point's x and y\n   * coordinates.\n   * @return {Number} magnitude\n   */\n  mag(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Judge whether this point is equal to another point, returning\n   * true or false.\n   * @param {Point} other the other point\n   * @return {boolean} whether the points are equal\n   */\n  equals(other): boolean {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  /**\n   * Calculate the distance from this point to another point\n   * @param {Point} p the other point\n   * @return {Number} distance\n   */\n  dist(p): number {\n    return Math.sqrt(this.distSqr(p));\n  }\n\n  /**\n   * Calculate the distance from this point to another point,\n   * without the square root step. Useful if you're comparing\n   * relative distances.\n   * @param {Point} p the other point\n   * @return {Number} distance\n   */\n  distSqr(p): number {\n    const dx = p.x - this.x;\n    const dy = p.y - this.y;\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Get the angle from the 0, 0 coordinate to this point, in radians\n   * coordinates.\n   * @return {Number} angle\n   */\n  angle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Get the angle from this point to another point, in radians\n   * @param {Point} b the other point\n   * @return {Number} angle\n   */\n  angleTo(b: Point): number {\n    return Math.atan2(this.y - b.y, this.x - b.x);\n  }\n\n  /**\n   * Get the angle between this point and another point, in radians\n   * @param {Point} b the other point\n   * @return {Number} angle\n   */\n  angleWith(b: Point): number {\n    return this.angleWithSep(b.x, b.y);\n  }\n\n  /*\n   * Find the angle of the two vectors, solving the formula for\n   * the cross product a x b = |a||b|sin(θ) for θ.\n   * @param {Number} x the x-coordinate\n   * @param {Number} y the y-coordinate\n   * @return {Number} the angle in radians\n   */\n  angleWithSep(x: number, y: number): number {\n    return Math.atan2(this.x * y - this.y * x, this.x * x + this.y * y);\n  }\n\n  /**\n   * Get a string-concatenation-friendly representation of this point\n   * @returns {string} a human friendly string representation of this point\n   */\n  toString(): string {\n    return `{x: ${this.x}, y: ${this.y}}`;\n  }\n\n  /**\n   * Construct a point from an array if necessary, otherwise if the input\n   * is already a Point, or an unknown type, return it unchanged\n   * @param {Array<number> | Point} a any kind of input value\n   * @return {Point} constructed point, or passed-through value.\n   * @example\n   * // this\n   * var point = Point.convert([0, 1]);\n   * // is equivalent to\n   * var point = new Point(0, 1);\n   */\n  static convert(a: Point | Array<number>) {\n    if (a instanceof Point) {\n      return a;\n    }\n    if (Array.isArray(a)) {\n      return new Point(a[0], a[1]);\n    }\n    return a;\n  }\n}\n"],"names":[],"mappings":"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"}